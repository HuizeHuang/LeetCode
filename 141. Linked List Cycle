/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        
        // Use two pointers, one fast, one slow
        // fast pointer pass two node on each step, slow pointer pass one each step
        // time: cyclic: O(n + k), k is length of loop, non-cyclic O(n)
        // space: O(1)
        
        /* two ways */
        if (head == null || head.next == null)
                return false;
        /* 
        ListNode slow = head, fast = head.next;
        while (slow != fast){
            if (fast == null || fast.next == null)
                return false;
            slow = slow.next;
            fast = fast.next.next;
        }
        return true;
        */
        
        ListNode slow = head, fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast)
                return true;
        }
        return false;
    }
}
